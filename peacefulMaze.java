public class peacefulMaze {
    // public final int[][] grid = {
    //     {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    //     {1, 0, 0, 1, 0, 0, 0, 1, 0, 1},
    //     {1, 0, 1, 1, 0, 1, 0, 1, 0, 1},
    //     {1, 0, 1, 0, 0, 1, 0, 1, 0, 1},
    //     {1, 0, 1, 0, 1, 1, 0, 1, 0, 1},
    //     {1, 0, 0, 0, 1, 5, 0, 0, 0, 1},
    //     {1, 0, 1, 0, 1, 1, 1, 1, 1, 1},
    //     {1, 0, 1, 0, 0, 0, 0, 1, 0, 1},
    //     {1, 0, 0, 0, 0, 1, 0, 1, 0, 1},
    //     {1, 1, 1, 1, 4, 1, 1, 1, 1, 1}
    // };
    public final int[][] grid = {
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 5, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
        {1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1},
        {1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1},
        {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1},
        {1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1},
        {1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1},
        {1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1},
        {1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 1},
        {1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1},
        {1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1},
        {1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
        {1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1},
        {1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1},
        {1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1},
        {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1},
        {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
        {1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1},
        {1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
    };
    /*
     * 0 -> open walls
     * 1 -> walls
     * 2 -> traps
     * 3 -> puzzle location
     * 4 -> exit
     */

    // Check cell type methods
    public boolean isWall(int x, int y) {
        return grid[x][y] == 1;
    }

    public boolean isTrap(int x, int y) {
        return grid[x][y] == 2;
    }

    public boolean isPuzzle(int x, int y) {
        return grid[x][y] == 3;
    }

    public boolean isExit(int x, int y) {
        return grid[x][y] == 4;
    }

    public boolean isOpenPath(int x, int y) {
        return grid[x][y] == 0;
        // return grid[x][y] == 0 || grid[x][y] == 5;  // Start point is also considered open
    }

    public boolean isStart(int x, int y){
        return grid[x][y] == 5;
    }
}
